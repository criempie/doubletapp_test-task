{"ast":null,"code":"var _jsxFileName = \"/home/crimemp/Documents/GitHub/doubletapp_test-task/src/InputSelect/index.js\";\nimport React, { Component } from 'react';\nimport './index.css';\n\nclass InputSelect extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getIcon = () => /*#__PURE__*/React.createElement(\"img\", {\n      className: \"sortSelect-icon\",\n      src: \"./images/sort.svg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 18\n      }\n    });\n\n    this.getLabel = () => /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 19\n      }\n    }, this.state.label);\n\n    this.switchVisibility = () => this.setState({\n      isOpen: !this.state.isOpen\n    });\n\n    this.setHidden = () => this.setState({\n      isOpen: false\n    });\n\n    this.selectOption = (option, id) => this.setState({\n      selected: option,\n      selectedID: id\n    });\n\n    this.state = {\n      label: this.props.label,\n      options: this.props.options || [],\n      selected: this.props.selected,\n      isOpen: false,\n      selectedID: -1,\n      typeSelect: this.props.type || \"classic\",\n      customStyle: this.props.style || null\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-container\",\n      style: this.state.customStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 4\n      }\n    }, this.state.label ? this.getLabel() : null, /*#__PURE__*/React.createElement(\"button\", {\n      className: this.getClassName(),\n      onClick: this.switchVisibility,\n      onBlur: () => setTimeout(this.setHidden, 200),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 6\n      }\n    }, this.state.selected), this.state.typeSelect == \"sortSelect\" ? this.getIcon() : null), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.typeSelect == 'colorSelect' ? \"colors-container\" : \"options-container\",\n      style: {\n        display: this.state.isOpen ? \"grid\" : \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }\n    }, this.state.typeSelect == \"colorSelect\" ? this.getColors() : this.getOptions()));\n  }\n\n  getClassName() {\n    let type = this.state.typeSelect;\n\n    if (type == \"classic\" || type == \"colorSelect\") {\n      return \"custom-select\";\n    } else if (type == \"sortSelect\") {\n      return \"custom-select sort-select\";\n    }\n  }\n\n  getOptions() {\n    let optionsArray = [];\n\n    for (let id in this.state.options) {\n      let temp = [];\n      temp = [/*#__PURE__*/React.createElement(\"input\", {\n        id: id,\n        className: \"option-input\",\n        type: \"radio\",\n        value: this.state.options.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 5\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: id,\n        className: \"option-label\",\n        onClick: () => this.selectOption(this.state.options[id], id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 5\n        }\n      }, this.state.options[id], this.setCheck(id))];\n      optionsArray = optionsArray.concat(temp);\n    }\n\n    console.log(optionsArray);\n    return optionsArray;\n  }\n\n  getColors() {\n    let optionsArray = [];\n\n    for (let color of this.state.options) {\n      let id = btoa(encodeURIComponent(color));\n      let temp = [];\n      temp = [/*#__PURE__*/React.createElement(\"input\", {\n        id: id,\n        className: \"color-input\",\n        type: \"radio\",\n        value: color,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 5\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"option-color\",\n        htmlFor: id,\n        onClick: () => this.selectOption(color, id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 5\n        }\n      })];\n      optionsArray = optionsArray.concat(temp);\n    }\n\n    return optionsArray;\n  }\n\n  setCheck(id) {\n    if (this.state.selectedID == id) {\n      return /*#__PURE__*/React.createElement(\"img\", {\n        id: \"checked\",\n        src: \"./images/selected.svg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }\n      });\n    }\n  }\n\n}\n\nexport default InputSelect;","map":{"version":3,"sources":["/home/crimemp/Documents/GitHub/doubletapp_test-task/src/InputSelect/index.js"],"names":["React","Component","InputSelect","constructor","props","getIcon","getLabel","state","label","switchVisibility","setState","isOpen","setHidden","selectOption","option","id","selected","selectedID","options","typeSelect","type","customStyle","style","render","getClassName","setTimeout","display","getColors","getOptions","optionsArray","temp","setCheck","concat","console","log","color","btoa","encodeURIComponent"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './index.css';\n\nclass InputSelect extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tlabel: this.props.label,\n\t\t\toptions: this.props.options || [],\n\t\t\tselected: this.props.selected,\n\t\t\tisOpen: false,\n\t\t\tselectedID: -1,\n\t\t\ttypeSelect: this.props.type || \"classic\",\n\t\t\tcustomStyle: this.props.style || null,\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"input-container\" style={this.state.customStyle}>\n\t\t\t\t{this.state.label ? this.getLabel() : null}\n\t\t\t\t<button className={this.getClassName()} onClick={this.switchVisibility} onBlur={() => setTimeout(this.setHidden, 200)}>\n\t\t\t\t\t<span>{this.state.selected}</span>\n\t\t\t\t\t{this.state.typeSelect == \"sortSelect\" ? this.getIcon() : null}\n\t\t\t\t</button>\n\t\t\t\t<div className={this.state.typeSelect == 'colorSelect' ? \"colors-container\" : \"options-container\"} style={{display: this.state.isOpen ? \"grid\" : \"none\"}}>\n\t\t\t\t\t{this.state.typeSelect == \"colorSelect\" ? this.getColors() : this.getOptions()}\n\t\t\t\t</div>\n\t\t\t</div>\t\n\t\t);\n\t}\n\n\tgetClassName() {\n\t\tlet type = this.state.typeSelect;\n\n\t\tif (type == \"classic\" || type == \"colorSelect\") {\n\t\t\treturn \"custom-select\";\n\t\t} else if (type == \"sortSelect\") {\n\t\t\treturn \"custom-select sort-select\";\n\t\t} \n\t}\n\n\tgetIcon = () => <img className=\"sortSelect-icon\" src=\"./images/sort.svg\"></img>;\n\n\tgetLabel = () => <h4>{this.state.label}</h4>;\n\n\tswitchVisibility = () => this.setState({isOpen: !this.state.isOpen});\n\n\tsetHidden = () => this.setState({isOpen: false});\n\n\tgetOptions() {\n\t\tlet optionsArray = [];\n\t\tfor (let id in this.state.options) {\n\t\t\tlet temp = [];\n\t\t\ttemp = [\n\t\t\t\t<input id={id} className=\"option-input\" type=\"radio\" value={this.state.options.id}></input>,\n\t\t\t\t<label htmlFor={id} className=\"option-label\" onClick={() => this.selectOption(this.state.options[id], id)} >\n\t\t\t\t\t{this.state.options[id]}\n\t\t\t\t\t{this.setCheck(id)}\n\t\t\t\t\t</label>\n\t\t\t];\n\n\t\t\toptionsArray = optionsArray.concat(temp);\n\t\t}\n\t\tconsole.log(optionsArray)\n\t\treturn optionsArray;\n\t}\n\n\tgetColors() {\n\t\tlet optionsArray = [];\n\t\tfor (let color of this.state.options) {\n\t\t\tlet id = btoa(encodeURIComponent(color));\n\t\t\tlet temp = [];\n\t\t\ttemp = [\n\t\t\t\t<input id={id} className=\"color-input\" type=\"radio\" value={color}></input>,\n\t\t\t\t<div className=\"option-color\" htmlFor={id} onClick={() => this.selectOption(color, id)} ></div>\n\t\t\t];\n\n\t\t\toptionsArray = optionsArray.concat(temp);\n\t\t}\n\t\treturn optionsArray;\n\t}\n\n\tselectOption = (option, id) => this.setState({selected: option, selectedID: id})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tsetCheck(id) {\n\t\tif (this.state.selectedID == id) {\n\t\t\treturn <img id=\"checked\" src=\"./images/selected.svg\"></img>\n\t\t}\n\t}\t\t\t\t\t\t\t\t\t\t\t\n\n}\n\nexport default InputSelect\t"]},"metadata":{},"sourceType":"module"}